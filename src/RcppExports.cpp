// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/varapproxr.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mvn_entropy
double mvn_entropy(arma::mat& S);
RcppExport SEXP _varapproxr_mvn_entropy(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(mvn_entropy(S));
    return rcpp_result_gen;
END_RCPP
}
// mvn_E_lpdf
double mvn_E_lpdf(arma::vec& mu0, arma::mat& Sigma0, arma::vec& mu, arma::mat& Sigma);
RcppExport SEXP _varapproxr_mvn_E_lpdf(SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvn_E_lpdf(mu0, Sigma0, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// dot_y_minus_Xb
double dot_y_minus_Xb(double yty, arma::vec Xty, arma::mat& XtX, arma::vec mu, arma::mat& Sigma);
RcppExport SEXP _varapproxr_dot_y_minus_Xb(SEXP ytySEXP, SEXP XtySEXP, SEXP XtXSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type yty(ytySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dot_y_minus_Xb(yty, Xty, XtX, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// ig_entropy
double ig_entropy(double a, double b);
RcppExport SEXP _varapproxr_ig_entropy(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_entropy(a, b));
    return rcpp_result_gen;
END_RCPP
}
// ig_E
double ig_E(double a, double b);
RcppExport SEXP _varapproxr_ig_E(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_E(a, b));
    return rcpp_result_gen;
END_RCPP
}
// ig_E_inv
double ig_E_inv(double a, double b);
RcppExport SEXP _varapproxr_ig_E_inv(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_E_inv(a, b));
    return rcpp_result_gen;
END_RCPP
}
// ig_E_log
double ig_E_log(double a, double b);
RcppExport SEXP _varapproxr_ig_E_log(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_E_log(a, b));
    return rcpp_result_gen;
END_RCPP
}
// ig_E_lpdf
double ig_E_lpdf(double a0, double b0, double a, double b);
RcppExport SEXP _varapproxr_ig_E_lpdf(SEXP a0SEXP, SEXP b0SEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ig_E_lpdf(a0, b0, a, b));
    return rcpp_result_gen;
END_RCPP
}
// scaled_inv_chisq_H
double scaled_inv_chisq_H(double nu, double tau);
RcppExport SEXP _varapproxr_scaled_inv_chisq_H(SEXP nuSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(scaled_inv_chisq_H(nu, tau));
    return rcpp_result_gen;
END_RCPP
}
// scaled_inv_chisq_E
double scaled_inv_chisq_E(double nu, double tau);
RcppExport SEXP _varapproxr_scaled_inv_chisq_E(SEXP nuSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(scaled_inv_chisq_E(nu, tau));
    return rcpp_result_gen;
END_RCPP
}
// scaled_inv_chisq_E_inv
double scaled_inv_chisq_E_inv(double nu, double tau);
RcppExport SEXP _varapproxr_scaled_inv_chisq_E_inv(SEXP nuSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(scaled_inv_chisq_E_inv(nu, tau));
    return rcpp_result_gen;
END_RCPP
}
// scaled_inv_chisq_E_log
double scaled_inv_chisq_E_log(double nu, double tau);
RcppExport SEXP _varapproxr_scaled_inv_chisq_E_log(SEXP nuSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(scaled_inv_chisq_E_log(nu, tau));
    return rcpp_result_gen;
END_RCPP
}
// inv_wishart_E_invX
arma::mat inv_wishart_E_invX(double nu, arma::mat& S);
RcppExport SEXP _varapproxr_inv_wishart_E_invX(SEXP nuSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_wishart_E_invX(nu, S));
    return rcpp_result_gen;
END_RCPP
}
// inv_wishart_E_logdet
double inv_wishart_E_logdet(double nu, arma::mat& S);
RcppExport SEXP _varapproxr_inv_wishart_E_logdet(SEXP nuSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_wishart_E_logdet(nu, S));
    return rcpp_result_gen;
END_RCPP
}
// inv_vectorise
arma::mat inv_vectorise(arma::vec v);
RcppExport SEXP _varapproxr_inv_vectorise(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_vectorise(v));
    return rcpp_result_gen;
END_RCPP
}
// vech
arma::vec vech(arma::mat X);
RcppExport SEXP _varapproxr_vech(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(vech(X));
    return rcpp_result_gen;
END_RCPP
}
// inv_vech
arma::mat inv_vech(arma::vec v);
RcppExport SEXP _varapproxr_inv_vech(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_vech(v));
    return rcpp_result_gen;
END_RCPP
}
// lmvgamma
double lmvgamma(double x, int p);
RcppExport SEXP _varapproxr_lmvgamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(lmvgamma(x, p));
    return rcpp_result_gen;
END_RCPP
}
// mvgamma
double mvgamma(double x, int p);
RcppExport SEXP _varapproxr_mvgamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mvgamma(x, p));
    return rcpp_result_gen;
END_RCPP
}
// mvdigamma
double mvdigamma(double x, int p);
RcppExport SEXP _varapproxr_mvdigamma(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(mvdigamma(x, p));
    return rcpp_result_gen;
END_RCPP
}
// woodbury
arma::mat woodbury(arma::mat& A, arma::mat& B, arma::mat& C, arma::mat& D);
RcppExport SEXP _varapproxr_woodbury(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(woodbury(A, B, C, D));
    return rcpp_result_gen;
END_RCPP
}
// arma2vec
Rcpp::NumericVector arma2vec(arma::vec x);
RcppExport SEXP _varapproxr_arma2vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(arma2vec(x));
    return rcpp_result_gen;
END_RCPP
}
// blockDiag
arma::mat blockDiag(arma::field<arma::mat>& x);
RcppExport SEXP _varapproxr_blockDiag(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(blockDiag(x));
    return rcpp_result_gen;
END_RCPP
}
// bind_cols
arma::mat bind_cols(arma::field<arma::mat>& x);
RcppExport SEXP _varapproxr_bind_cols(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bind_cols(x));
    return rcpp_result_gen;
END_RCPP
}
// solve_two_level_sparse
Rcpp::List solve_two_level_sparse(arma::vec a1, arma::mat A11, arma::field<arma::vec> a2, arma::field<arma::mat> A22, arma::field<arma::mat> A12);
RcppExport SEXP _varapproxr_solve_two_level_sparse(SEXP a1SEXP, SEXP A11SEXP, SEXP a2SEXP, SEXP A22SEXP, SEXP A12SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A11(A11SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type A22(A22SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type A12(A12SEXP);
    rcpp_result_gen = Rcpp::wrap(solve_two_level_sparse(a1, A11, a2, A22, A12));
    return rcpp_result_gen;
END_RCPP
}
// pnorm_mat
arma::mat pnorm_mat(arma::mat& m);
RcppExport SEXP _varapproxr_pnorm_mat(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm_mat(m));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_mat
arma::mat dnorm_mat(arma::mat& m);
RcppExport SEXP _varapproxr_dnorm_mat(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_mat(m));
    return rcpp_result_gen;
END_RCPP
}
// vb_lm
List vb_lm(const arma::mat& X, const arma::vec& y, const arma::vec& mu0, const arma::mat& Sigma0, const double a0, const double b0, const int prior, double tol, int maxiter, bool verbose);
RcppExport SEXP _varapproxr_vb_lm(SEXP XSEXP, SEXP ySEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP priorSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const int >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_lm(X, y, mu0, Sigma0, a0, b0, prior, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// update_vb_lm
List update_vb_lm(List vb_fit, const arma::mat& X, const arma::vec& y, double tol, int maxiter, bool verbose);
RcppExport SEXP _varapproxr_update_vb_lm(SEXP vb_fitSEXP, SEXP XSEXP, SEXP ySEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type vb_fit(vb_fitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(update_vb_lm(vb_fit, X, y, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// vb_lmm
List vb_lmm(arma::vec& y, arma::mat& X, arma::field<arma::mat>& Zlist, arma::vec& J, arma::vec& R, arma::vec& mu_beta0, arma::mat& Sigma_beta0, double xi_sigma, arma::mat Lambda_sigma, arma::vec& xi_k, arma::field<arma::mat> Lambda_k, double tol, int maxiter, bool verbose, bool trace);
RcppExport SEXP _varapproxr_vb_lmm(SEXP ySEXP, SEXP XSEXP, SEXP ZlistSEXP, SEXP JSEXP, SEXP RSEXP, SEXP mu_beta0SEXP, SEXP Sigma_beta0SEXP, SEXP xi_sigmaSEXP, SEXP Lambda_sigmaSEXP, SEXP xi_kSEXP, SEXP Lambda_kSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type Zlist(ZlistSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_beta0(mu_beta0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_beta0(Sigma_beta0SEXP);
    Rcpp::traits::input_parameter< double >::type xi_sigma(xi_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda_sigma(Lambda_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type xi_k(xi_kSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Lambda_k(Lambda_kSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_lmm(y, X, Zlist, J, R, mu_beta0, Sigma_beta0, xi_sigma, Lambda_sigma, xi_k, Lambda_k, tol, maxiter, verbose, trace));
    return rcpp_result_gen;
END_RCPP
}
// vb_lmm_randint
List vb_lmm_randint(const arma::mat& X, const arma::mat& Z, const arma::vec& y, const arma::vec& mu_beta, const arma::mat& sigma_beta, arma::vec& mu, arma::mat& sigma, double Aeps, double Beps, double Au, double Bu, double Bqeps, double Bqu, double tol, int maxiter, bool verbose, bool trace);
RcppExport SEXP _varapproxr_vb_lmm_randint(SEXP XSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP mu_betaSEXP, SEXP sigma_betaSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP AepsSEXP, SEXP BepsSEXP, SEXP AuSEXP, SEXP BuSEXP, SEXP BqepsSEXP, SEXP BquSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_beta(mu_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Aeps(AepsSEXP);
    Rcpp::traits::input_parameter< double >::type Beps(BepsSEXP);
    Rcpp::traits::input_parameter< double >::type Au(AuSEXP);
    Rcpp::traits::input_parameter< double >::type Bu(BuSEXP);
    Rcpp::traits::input_parameter< double >::type Bqeps(BqepsSEXP);
    Rcpp::traits::input_parameter< double >::type Bqu(BquSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_lmm_randint(X, Z, y, mu_beta, sigma_beta, mu, sigma, Aeps, Beps, Au, Bu, Bqeps, Bqu, tol, maxiter, verbose, trace));
    return rcpp_result_gen;
END_RCPP
}
// vb_lmm_randintslope
List vb_lmm_randintslope(arma::field<arma::mat>& Xlist, arma::field<arma::mat>& Zlist, arma::field<arma::vec>& ylist, const arma::vec& beta_mu0, const arma::mat& beta_sigma0, double nu_Omega0, arma::mat lambda_Omega0, int pr_Omega, double sigma_a0, double sigma_b0, int pr_sigma, double tol, int maxiter, bool verbose, bool trace, bool streamlined, bool use_elbo);
RcppExport SEXP _varapproxr_vb_lmm_randintslope(SEXP XlistSEXP, SEXP ZlistSEXP, SEXP ylistSEXP, SEXP beta_mu0SEXP, SEXP beta_sigma0SEXP, SEXP nu_Omega0SEXP, SEXP lambda_Omega0SEXP, SEXP pr_OmegaSEXP, SEXP sigma_a0SEXP, SEXP sigma_b0SEXP, SEXP pr_sigmaSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP, SEXP traceSEXP, SEXP streamlinedSEXP, SEXP use_elboSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type Zlist(ZlistSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec>& >::type ylist(ylistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_mu0(beta_mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_sigma0(beta_sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type nu_Omega0(nu_Omega0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lambda_Omega0(lambda_Omega0SEXP);
    Rcpp::traits::input_parameter< int >::type pr_Omega(pr_OmegaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_a0(sigma_a0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_b0(sigma_b0SEXP);
    Rcpp::traits::input_parameter< int >::type pr_sigma(pr_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type streamlined(streamlinedSEXP);
    Rcpp::traits::input_parameter< bool >::type use_elbo(use_elboSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_lmm_randintslope(Xlist, Zlist, ylist, beta_mu0, beta_sigma0, nu_Omega0, lambda_Omega0, pr_Omega, sigma_a0, sigma_b0, pr_sigma, tol, maxiter, verbose, trace, streamlined, use_elbo));
    return rcpp_result_gen;
END_RCPP
}
// jaakkola_jordan
double jaakkola_jordan(const arma::mat& X, const arma::vec& y, arma::vec& eta1, arma::vec& eta2, const arma::vec& eta1_p, const arma::vec& eta2_p);
RcppExport SEXP _varapproxr_jaakkola_jordan(SEXP XSEXP, SEXP ySEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta1_pSEXP, SEXP eta2_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_p(eta1_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_p(eta2_pSEXP);
    rcpp_result_gen = Rcpp::wrap(jaakkola_jordan(X, y, eta1, eta2, eta1_p, eta2_p));
    return rcpp_result_gen;
END_RCPP
}
// jaakkola_jordan_n
double jaakkola_jordan_n(const arma::mat& X, const arma::vec& y, const arma::vec& n, arma::vec& eta1, arma::vec& eta2, const arma::vec& eta1_p, const arma::vec& eta2_p);
RcppExport SEXP _varapproxr_jaakkola_jordan_n(SEXP XSEXP, SEXP ySEXP, SEXP nSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta1_pSEXP, SEXP eta2_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_p(eta1_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_p(eta2_pSEXP);
    rcpp_result_gen = Rcpp::wrap(jaakkola_jordan_n(X, y, n, eta1, eta2, eta1_p, eta2_p));
    return rcpp_result_gen;
END_RCPP
}
// saul_jordan
double saul_jordan(const arma::mat& X, const arma::vec& y, arma::vec& eta1, arma::vec& eta2, const arma::vec& eta1_p, const arma::vec& eta2_p, arma::vec& omega1);
RcppExport SEXP _varapproxr_saul_jordan(SEXP XSEXP, SEXP ySEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta1_pSEXP, SEXP eta2_pSEXP, SEXP omega1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_p(eta1_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_p(eta2_pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type omega1(omega1SEXP);
    rcpp_result_gen = Rcpp::wrap(saul_jordan(X, y, eta1, eta2, eta1_p, eta2_p, omega1));
    return rcpp_result_gen;
END_RCPP
}
// saul_jordan_n
double saul_jordan_n(const arma::mat& X, const arma::vec& y, const arma::vec& n, arma::vec& eta1, arma::vec& eta2, const arma::vec& eta1_p, const arma::vec& eta2_p, arma::vec& omega1);
RcppExport SEXP _varapproxr_saul_jordan_n(SEXP XSEXP, SEXP ySEXP, SEXP nSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta1_pSEXP, SEXP eta2_pSEXP, SEXP omega1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_p(eta1_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_p(eta2_pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type omega1(omega1SEXP);
    rcpp_result_gen = Rcpp::wrap(saul_jordan_n(X, y, n, eta1, eta2, eta1_p, eta2_p, omega1));
    return rcpp_result_gen;
END_RCPP
}
// knowles_minka_wand
double knowles_minka_wand(const arma::mat& X, const arma::vec& y, arma::vec& eta1, arma::vec& eta2, const arma::vec& eta1_p, const arma::vec& eta2_p, const arma::vec& MS_p, const arma::vec& MS_s);
RcppExport SEXP _varapproxr_knowles_minka_wand(SEXP XSEXP, SEXP ySEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta1_pSEXP, SEXP eta2_pSEXP, SEXP MS_pSEXP, SEXP MS_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_p(eta1_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_p(eta2_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type MS_p(MS_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type MS_s(MS_sSEXP);
    rcpp_result_gen = Rcpp::wrap(knowles_minka_wand(X, y, eta1, eta2, eta1_p, eta2_p, MS_p, MS_s));
    return rcpp_result_gen;
END_RCPP
}
// knowles_minka_wand_n
double knowles_minka_wand_n(const arma::mat& X, const arma::vec& y, const arma::vec& n, arma::vec& eta1, arma::vec& eta2, const arma::vec& eta1_p, const arma::vec& eta2_p, const arma::vec& MS_p, const arma::vec& MS_s);
RcppExport SEXP _varapproxr_knowles_minka_wand_n(SEXP XSEXP, SEXP ySEXP, SEXP nSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta1_pSEXP, SEXP eta2_pSEXP, SEXP MS_pSEXP, SEXP MS_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_p(eta1_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_p(eta2_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type MS_p(MS_pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type MS_s(MS_sSEXP);
    rcpp_result_gen = Rcpp::wrap(knowles_minka_wand_n(X, y, n, eta1, eta2, eta1_p, eta2_p, MS_p, MS_s));
    return rcpp_result_gen;
END_RCPP
}
// vb_logistic
List vb_logistic(const arma::mat& X, const arma::vec& y, const arma::vec& mu0, const arma::mat& Sigma0, const arma::vec& mu_init, const arma::mat& Sigma_init, double tol, int maxiter, int maxiter_jj, std::string alg, bool verbose);
RcppExport SEXP _varapproxr_vb_logistic(SEXP XSEXP, SEXP ySEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP mu_initSEXP, SEXP Sigma_initSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP maxiter_jjSEXP, SEXP algSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter_jj(maxiter_jjSEXP);
    Rcpp::traits::input_parameter< std::string >::type alg(algSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_logistic(X, y, mu0, Sigma0, mu_init, Sigma_init, tol, maxiter, maxiter_jj, alg, verbose));
    return rcpp_result_gen;
END_RCPP
}
// vb_logistic_n
List vb_logistic_n(const arma::mat& X, const arma::vec& y, const arma::vec& n, const arma::vec& mu0, const arma::mat& Sigma0, const arma::vec& mu_init, const arma::mat& Sigma_init, double tol, int maxiter, int maxiter_jj, std::string alg, bool verbose);
RcppExport SEXP _varapproxr_vb_logistic_n(SEXP XSEXP, SEXP ySEXP, SEXP nSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP mu_initSEXP, SEXP Sigma_initSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP maxiter_jjSEXP, SEXP algSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_init(mu_initSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_init(Sigma_initSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter_jj(maxiter_jjSEXP);
    Rcpp::traits::input_parameter< std::string >::type alg(algSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_logistic_n(X, y, n, mu0, Sigma0, mu_init, Sigma_init, tol, maxiter, maxiter_jj, alg, verbose));
    return rcpp_result_gen;
END_RCPP
}
// vb_glmm
List vb_glmm(const arma::mat& X, const arma::mat& Z, const arma::vec& y, const arma::vec& mu_beta, const arma::mat& sigma_beta, arma::vec& mu, arma::mat& sigma, double Au, double Bu, double Bqu, double tol, int maxiter, bool verbose);
RcppExport SEXP _varapproxr_vb_glmm(SEXP XSEXP, SEXP ZSEXP, SEXP ySEXP, SEXP mu_betaSEXP, SEXP sigma_betaSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP AuSEXP, SEXP BuSEXP, SEXP BquSEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_beta(mu_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_beta(sigma_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Au(AuSEXP);
    Rcpp::traits::input_parameter< double >::type Bu(BuSEXP);
    Rcpp::traits::input_parameter< double >::type Bqu(BquSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_glmm(X, Z, y, mu_beta, sigma_beta, mu, sigma, Au, Bu, Bqu, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// vb_pois_reg
List vb_pois_reg(const arma::mat& X, const arma::vec& y, const arma::vec& n, const arma::vec& mu0, const arma::mat& Sigma0, double tol, int maxiter, bool verbose);
RcppExport SEXP _varapproxr_vb_pois_reg(SEXP XSEXP, SEXP ySEXP, SEXP nSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_pois_reg(X, y, n, mu0, Sigma0, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// vb_pois_mm
List vb_pois_mm(const arma::mat& X, arma::field<arma::mat>& Zlist, const arma::vec& y, const arma::vec& n, arma::vec& mu0, const arma::mat& Sigma0, arma::vec& a0, double tol, int maxiter, bool verbose);
RcppExport SEXP _varapproxr_vb_pois_mm(SEXP XSEXP, SEXP ZlistSEXP, SEXP ySEXP, SEXP nSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP a0SEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat>& >::type Zlist(ZlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vb_pois_mm(X, Zlist, y, n, mu0, Sigma0, a0, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ph_exponential
List ph_exponential(const arma::mat& X, const arma::vec& y, const arma::vec& v, const arma::vec& mu0, const arma::mat& Sigma0, double tol, int maxiter, bool verbose);
RcppExport SEXP _varapproxr_ph_exponential(SEXP XSEXP, SEXP ySEXP, SEXP vSEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP tolSEXP, SEXP maxiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ph_exponential(X, y, v, mu0, Sigma0, tol, maxiter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// GaussianEntropy
double GaussianEntropy(arma::vec& eta);
RcppExport SEXP _varapproxr_GaussianEntropy(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianEntropy(eta));
    return rcpp_result_gen;
END_RCPP
}
// G_VMP
arma::vec G_VMP(arma::vec v, arma::mat Q, arma::vec r, double s);
RcppExport SEXP _varapproxr_G_VMP(SEXP vSEXP, SEXP QSEXP, SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(G_VMP(v, Q, r, s));
    return rcpp_result_gen;
END_RCPP
}
// GaussianPriorFragment
arma::vec GaussianPriorFragment(arma::vec mu, arma::mat Sigma);
RcppExport SEXP _varapproxr_GaussianPriorFragment(SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianPriorFragment(mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// InverseGammaPriorFragment
arma::vec InverseGammaPriorFragment(double a, double b);
RcppExport SEXP _varapproxr_InverseGammaPriorFragment(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(InverseGammaPriorFragment(a, b));
    return rcpp_result_gen;
END_RCPP
}
// InverseWishartPriorFragment
arma::vec InverseWishartPriorFragment(double xi, arma::mat Lambda);
RcppExport SEXP _varapproxr_InverseWishartPriorFragment(SEXP xiSEXP, SEXP LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(InverseWishartPriorFragment(xi, Lambda));
    return rcpp_result_gen;
END_RCPP
}
// InverseGWishartPriorFragment
arma::field<arma::vec> InverseGWishartPriorFragment(arma::mat G, arma::vec xi, arma::mat Lambda);
RcppExport SEXP _varapproxr_InverseGWishartPriorFragment(SEXP GSEXP, SEXP xiSEXP, SEXP LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(InverseGWishartPriorFragment(G, xi, Lambda));
    return rcpp_result_gen;
END_RCPP
}
// IteratedInverseGWishartFragment
arma::field<arma::vec> IteratedInverseGWishartFragment(arma::mat G, arma::vec xi, arma::vec eta1_in, arma::vec eta2_in);
RcppExport SEXP _varapproxr_IteratedInverseGWishartFragment(SEXP GSEXP, SEXP xiSEXP, SEXP eta1_inSEXP, SEXP eta2_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta1_in(eta1_inSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta2_in(eta2_inSEXP);
    rcpp_result_gen = Rcpp::wrap(IteratedInverseGWishartFragment(G, xi, eta1_in, eta2_in));
    return rcpp_result_gen;
END_RCPP
}
// GaussianLikelihoodFragment
arma::field<arma::vec> GaussianLikelihoodFragment(arma::vec n, arma::mat XtX, arma::vec Xty, double yty, arma::vec eta1_in, arma::vec eta2_in);
RcppExport SEXP _varapproxr_GaussianLikelihoodFragment(SEXP nSEXP, SEXP XtXSEXP, SEXP XtySEXP, SEXP ytySEXP, SEXP eta1_inSEXP, SEXP eta2_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xty(XtySEXP);
    Rcpp::traits::input_parameter< double >::type yty(ytySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta1_in(eta1_inSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta2_in(eta2_inSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianLikelihoodFragment(n, XtX, Xty, yty, eta1_in, eta2_in));
    return rcpp_result_gen;
END_RCPP
}
// ExpectationGaussianSufficientStatistics
arma::field<arma::vec> ExpectationGaussianSufficientStatistics(arma::vec eta);
RcppExport SEXP _varapproxr_ExpectationGaussianSufficientStatistics(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ExpectationGaussianSufficientStatistics(eta));
    return rcpp_result_gen;
END_RCPP
}
// GaussianCommonParameters
arma::field<arma::mat> GaussianCommonParameters(arma::vec& eta);
RcppExport SEXP _varapproxr_GaussianCommonParameters(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianCommonParameters(eta));
    return rcpp_result_gen;
END_RCPP
}
// ExpectationInverseGWishartSufficientStatistics
arma::field<arma::mat> ExpectationInverseGWishartSufficientStatistics(arma::mat G, arma::vec eta);
RcppExport SEXP _varapproxr_ExpectationInverseGWishartSufficientStatistics(SEXP GSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(ExpectationInverseGWishartSufficientStatistics(G, eta));
    return rcpp_result_gen;
END_RCPP
}
// InverseGWishartCommonParameters
arma::field<arma::mat> InverseGWishartCommonParameters(arma::vec& eta);
RcppExport SEXP _varapproxr_InverseGWishartCommonParameters(SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(InverseGWishartCommonParameters(eta));
    return rcpp_result_gen;
END_RCPP
}
// vmp_lm
Rcpp::List vmp_lm(arma::vec& n, arma::mat& X, arma::vec& y, arma::vec& mu0, arma::mat& Sigma0, double A, int maxiter, double tol, bool verbose);
RcppExport SEXP _varapproxr_vmp_lm(SEXP nSEXP, SEXP XSEXP, SEXP ySEXP, SEXP mu0SEXP, SEXP Sigma0SEXP, SEXP ASEXP, SEXP maxiterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma0(Sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vmp_lm(n, X, y, mu0, Sigma0, A, maxiter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_varapproxr_mvn_entropy", (DL_FUNC) &_varapproxr_mvn_entropy, 1},
    {"_varapproxr_mvn_E_lpdf", (DL_FUNC) &_varapproxr_mvn_E_lpdf, 4},
    {"_varapproxr_dot_y_minus_Xb", (DL_FUNC) &_varapproxr_dot_y_minus_Xb, 5},
    {"_varapproxr_ig_entropy", (DL_FUNC) &_varapproxr_ig_entropy, 2},
    {"_varapproxr_ig_E", (DL_FUNC) &_varapproxr_ig_E, 2},
    {"_varapproxr_ig_E_inv", (DL_FUNC) &_varapproxr_ig_E_inv, 2},
    {"_varapproxr_ig_E_log", (DL_FUNC) &_varapproxr_ig_E_log, 2},
    {"_varapproxr_ig_E_lpdf", (DL_FUNC) &_varapproxr_ig_E_lpdf, 4},
    {"_varapproxr_scaled_inv_chisq_H", (DL_FUNC) &_varapproxr_scaled_inv_chisq_H, 2},
    {"_varapproxr_scaled_inv_chisq_E", (DL_FUNC) &_varapproxr_scaled_inv_chisq_E, 2},
    {"_varapproxr_scaled_inv_chisq_E_inv", (DL_FUNC) &_varapproxr_scaled_inv_chisq_E_inv, 2},
    {"_varapproxr_scaled_inv_chisq_E_log", (DL_FUNC) &_varapproxr_scaled_inv_chisq_E_log, 2},
    {"_varapproxr_inv_wishart_E_invX", (DL_FUNC) &_varapproxr_inv_wishart_E_invX, 2},
    {"_varapproxr_inv_wishart_E_logdet", (DL_FUNC) &_varapproxr_inv_wishart_E_logdet, 2},
    {"_varapproxr_inv_vectorise", (DL_FUNC) &_varapproxr_inv_vectorise, 1},
    {"_varapproxr_vech", (DL_FUNC) &_varapproxr_vech, 1},
    {"_varapproxr_inv_vech", (DL_FUNC) &_varapproxr_inv_vech, 1},
    {"_varapproxr_lmvgamma", (DL_FUNC) &_varapproxr_lmvgamma, 2},
    {"_varapproxr_mvgamma", (DL_FUNC) &_varapproxr_mvgamma, 2},
    {"_varapproxr_mvdigamma", (DL_FUNC) &_varapproxr_mvdigamma, 2},
    {"_varapproxr_woodbury", (DL_FUNC) &_varapproxr_woodbury, 4},
    {"_varapproxr_arma2vec", (DL_FUNC) &_varapproxr_arma2vec, 1},
    {"_varapproxr_blockDiag", (DL_FUNC) &_varapproxr_blockDiag, 1},
    {"_varapproxr_bind_cols", (DL_FUNC) &_varapproxr_bind_cols, 1},
    {"_varapproxr_solve_two_level_sparse", (DL_FUNC) &_varapproxr_solve_two_level_sparse, 5},
    {"_varapproxr_pnorm_mat", (DL_FUNC) &_varapproxr_pnorm_mat, 1},
    {"_varapproxr_dnorm_mat", (DL_FUNC) &_varapproxr_dnorm_mat, 1},
    {"_varapproxr_vb_lm", (DL_FUNC) &_varapproxr_vb_lm, 10},
    {"_varapproxr_update_vb_lm", (DL_FUNC) &_varapproxr_update_vb_lm, 6},
    {"_varapproxr_vb_lmm", (DL_FUNC) &_varapproxr_vb_lmm, 15},
    {"_varapproxr_vb_lmm_randint", (DL_FUNC) &_varapproxr_vb_lmm_randint, 17},
    {"_varapproxr_vb_lmm_randintslope", (DL_FUNC) &_varapproxr_vb_lmm_randintslope, 17},
    {"_varapproxr_jaakkola_jordan", (DL_FUNC) &_varapproxr_jaakkola_jordan, 6},
    {"_varapproxr_jaakkola_jordan_n", (DL_FUNC) &_varapproxr_jaakkola_jordan_n, 7},
    {"_varapproxr_saul_jordan", (DL_FUNC) &_varapproxr_saul_jordan, 7},
    {"_varapproxr_saul_jordan_n", (DL_FUNC) &_varapproxr_saul_jordan_n, 8},
    {"_varapproxr_knowles_minka_wand", (DL_FUNC) &_varapproxr_knowles_minka_wand, 8},
    {"_varapproxr_knowles_minka_wand_n", (DL_FUNC) &_varapproxr_knowles_minka_wand_n, 9},
    {"_varapproxr_vb_logistic", (DL_FUNC) &_varapproxr_vb_logistic, 11},
    {"_varapproxr_vb_logistic_n", (DL_FUNC) &_varapproxr_vb_logistic_n, 12},
    {"_varapproxr_vb_glmm", (DL_FUNC) &_varapproxr_vb_glmm, 13},
    {"_varapproxr_vb_pois_reg", (DL_FUNC) &_varapproxr_vb_pois_reg, 8},
    {"_varapproxr_vb_pois_mm", (DL_FUNC) &_varapproxr_vb_pois_mm, 10},
    {"_varapproxr_ph_exponential", (DL_FUNC) &_varapproxr_ph_exponential, 8},
    {"_varapproxr_GaussianEntropy", (DL_FUNC) &_varapproxr_GaussianEntropy, 1},
    {"_varapproxr_G_VMP", (DL_FUNC) &_varapproxr_G_VMP, 4},
    {"_varapproxr_GaussianPriorFragment", (DL_FUNC) &_varapproxr_GaussianPriorFragment, 2},
    {"_varapproxr_InverseGammaPriorFragment", (DL_FUNC) &_varapproxr_InverseGammaPriorFragment, 2},
    {"_varapproxr_InverseWishartPriorFragment", (DL_FUNC) &_varapproxr_InverseWishartPriorFragment, 2},
    {"_varapproxr_InverseGWishartPriorFragment", (DL_FUNC) &_varapproxr_InverseGWishartPriorFragment, 3},
    {"_varapproxr_IteratedInverseGWishartFragment", (DL_FUNC) &_varapproxr_IteratedInverseGWishartFragment, 4},
    {"_varapproxr_GaussianLikelihoodFragment", (DL_FUNC) &_varapproxr_GaussianLikelihoodFragment, 6},
    {"_varapproxr_ExpectationGaussianSufficientStatistics", (DL_FUNC) &_varapproxr_ExpectationGaussianSufficientStatistics, 1},
    {"_varapproxr_GaussianCommonParameters", (DL_FUNC) &_varapproxr_GaussianCommonParameters, 1},
    {"_varapproxr_ExpectationInverseGWishartSufficientStatistics", (DL_FUNC) &_varapproxr_ExpectationInverseGWishartSufficientStatistics, 2},
    {"_varapproxr_InverseGWishartCommonParameters", (DL_FUNC) &_varapproxr_InverseGWishartCommonParameters, 1},
    {"_varapproxr_vmp_lm", (DL_FUNC) &_varapproxr_vmp_lm, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_varapproxr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
